import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import org.jetbrains.kotlin.gradle.utils.extendsFrom
import org.jetbrains.kotlin.ir.backend.js.compile

/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    kotlin("jvm") version "2.0.20"
    id("com.github.johnrengelman.shadow") version "8.1.1"
    id("io.freefair.lombok") version "8.6"
    `java-library`
}

kotlin {
    jvmToolchain(21)
}

lombok {
    version = "1.18.32"
}

repositories {
    mavenLocal()
    /* mavenCentral() */
    maven {
        url = uri("https://hub.spigotmc.org/nexus/content/repositories/snapshots/")
    }

    maven {
        url = uri("https://oss.sonatype.org/content/groups/public/")
    }

    /* maven {
        url = uri("https://hub.jeff-media.com/nexus/repository/jeff-media-public/")
    } */

    maven {
        url = uri("https://repo.codemc.io/repository/maven-snapshots/")
    }

    maven {
        url = uri("https://repo.alessiodp.com/releases/")
    }

    maven {
        url = uri("https://jitpack.io")
    }

    maven {
        url = uri("https://repo.papermc.io/repository/maven-public/")
    }

    maven {
        url = uri("https://repo.maven.apache.org/maven2/")
    }
}

configurations {
    runtimeClasspath {
        isTransitive = false
    }

    testImplementation {
        extendsFrom(compileOnly.get())
    }
}

dependencies {
    compileOnly(libs.org.jetbrains.annotations)

    /* api(libs.com.jeff_media.morepersistentdatatypes) */
    implementation("com.jeff-media:MorePersistentDataTypes:2.4.0")

    api(libs.com.github.minuskube.smartinvs)
    api(libs.spigot.command.api)

    testImplementation(kotlin("test"))
    testImplementation(libs.com.github.seeseemelk.mockbukkit.v1.v21)
    testImplementation(libs.io.papermc.paper.paper.api)
    testImplementation(libs.org.junit.jupiter.junit.jupiter)
    testImplementation(libs.org.junit.jupiter.junit.jupiter.engine)

    compileOnly(libs.org.spigotmc.spigot.api)
    compileOnly(libs.org.jetbrains.kotlin.kotlin.stdlib)
    compileOnly(libs.org.jetbrains.kotlin.kotlin.reflect)
    compileOnly(libs.org.springframework.spring.context)
    compileOnly(libs.org.springframework.spring.core)
    compileOnly(libs.javax.annotation.javax.annotation.api)
    compileOnly(libs.com.alessiodp.parties.parties.api)
    compileOnly(libs.org.reflections.reflections)
    compileOnly(libs.com.github.milkbowl.vaultapi)


}

group = "com.jamesdpeters"
version = "3.0-SNAPSHOT"
description = "ChestsPlusPlus"
java.sourceCompatibility = JavaVersion.VERSION_21


tasks.withType<JavaCompile> {
    options.encoding = "UTF-8"
}

tasks.withType<Javadoc> {
    options.encoding = "UTF-8"
}

tasks.withType<ShadowJar> {
    configurations = listOf(project.configurations.runtimeClasspath.get())
    destinationDirectory = File("$rootDir/server/plugins")
    archiveClassifier = ""

//    isEnableRelocation = true
//    relocationPrefix = "${rootProject.group}"
}

tasks {
    processResources {
        expand(
            "version" to version,
            "spring_version" to libs.org.springframework.spring.core.get().version,
            "kotlin_version" to kotlin.coreLibrariesVersion,
            "javax_annotation_version" to libs.javax.annotation.javax.annotation.api.get().version,
            "reflections_version" to libs.org.reflections.reflections.get().version,
        )
    }
}

tasks.test {
    useJUnitPlatform()
}


